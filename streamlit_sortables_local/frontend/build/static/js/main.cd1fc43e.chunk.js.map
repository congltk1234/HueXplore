{"version":3,"sources":["SortableItem.tsx","SortableComponent.tsx","index.tsx"],"names":["SortableItem","props","useSortable","id","attributes","listeners","setNodeRef","transform","transition","style","CSS","Transform","toString","className","isActive","ref","children","Container","useDroppable","header","width","items","strategy","rectSortingStrategy","SortableComponent","useState","setItems","clonedItems","setClonedItems","activeItem","setActiveItem","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","onDragEnd","event","active","over","activeContainerIndex","findContainer","overContainerIndex","container","activeItemIndex","indexOf","overItemIndex","newItems","map","index","arrayMove","items1","items2","length","every","container2","item","isSameOrder","Streamlit","setComponentValue","onDragOver","console","log","slice","onDragStart","onDragCancel","key","direction","containerIndex","findIndex","includes","withStreamlitConnection","args","useEffect","setFrameHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd1fc43e.chunk.js","sourcesContent":["import React, {ReactNode, FunctionComponent} from 'react';\nimport {useSortable} from '@dnd-kit/sortable';\nimport {CSS} from '@dnd-kit/utilities';\n\nimport './SortableComponent.css'\n\n\nexport interface SortableItemProps {\n  id: string,\n  isActive?: boolean,\n  children?: ReactNode,\n}\n\nexport const SortableItem: FunctionComponent<SortableItemProps> = ((props) => {\n    const {\n      attributes,\n      listeners,\n      setNodeRef,\n      transform,\n      transition,\n    } = useSortable({id: props.id});\n\n    const style = {\n      transform: CSS.Transform.toString(transform),\n      transition\n    };\n\n    const className = \"btn shadow-none sortable-item \" + (props.isActive ? \"active\" : \"\");\n\n    return (\n      <li className={className} ref={setNodeRef} style={style} {...attributes} {...listeners}>\n        {props.children ? props.children : null}\n      </li>\n    )\n})\n","import {\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useState, useEffect } from \"react\"\nimport {\n  DndContext, \n  useDroppable,\n  DragOverlay,\n  KeyboardSensor,\n  MouseSensor,\n  TouchSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  rectSortingStrategy,\n} from '@dnd-kit/sortable';\n\nimport {SortableItem} from \"./SortableItem\"\nimport './SortableComponent.css'\n\n\ntype Direction = 'horizontal' | 'vertical';\n\ninterface StreamlitArguments {\n  direction?: Direction,\n  items: ContainerDescription[],\n}\n\ninterface ContainerDescription {\n  header: string,\n  items: string[]\n}\n\ninterface ContainerProps {\n  header: string,\n  items: string[],\n  direction?: Direction,\n  width?: number,\n  children?: ReactNode,\n}\n\nfunction Container(props: ContainerProps) {\n  const {setNodeRef} = useDroppable({\n    id: props.header,\n  });\n\n  return (\n    <div className=\"sortable-container\" ref={setNodeRef} style={{width: props.width}}>\n      {\n        props.header? (<div className=\"container-header\">{props.header}</div>): null\n      }\n      <SortableContext id={props.header} items={props.items} strategy={rectSortingStrategy}>\n        <div className=\"container-body\">\n        {props.children}\n        </div>\n      </SortableContext>\n    </div>\n  )\n}\n\ninterface SortableComponentProps {\n  direction?: Direction,\n  items: ContainerDescription[]\n}\n\nfunction SortableComponent (props: SortableComponentProps){\n  const [items, setItems] = useState(props.items);\n  const [clonedItems, setClonedItems] = useState(props.items);\n  const [activeItem, setActiveItem] = useState(null);\n  const sensors = useSensors(\n    useSensor(MouseSensor, {\n      activationConstraint: {\n        distance: 10,\n      },\n    }),\n    useSensor(TouchSensor, {\n      activationConstraint: {\n        delay: 250,\n        tolerance: 5,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n  return (\n    <DndContext\n      sensors={sensors}\n      onDragEnd={handleDragEnd}\n      onDragOver={handleDragOver}\n      onDragStart={handleDragStart}\n      onDragCancel={handleDragCancel}\n    >\n      {\n        items.map(({header, items}) => {\n          return (\n            <Container key={header} header={header} items={items} direction={props.direction}>\n              {\n                items.map(item => {\n                  return (\n                    <SortableItem key={item} id={item} isActive={item===activeItem}>{item}</SortableItem>\n                  )\n                })\n              }\n            </Container>\n          )\n        })\n      }\n      <DragOverlay>\n        <SortableItem id=\"\">{activeItem}</SortableItem>\n      </DragOverlay>\n    </DndContext>\n  );\n\n  function handleDragStart(event: any) {\n    setActiveItem(event.active.id);\n    setClonedItems(items);\n  }\n\n  function handleDragCancel() {\n    console.log('canceled')\n    setActiveItem(null);\n    setItems(clonedItems);\n  }\n\n  function handleDragEnd(event: any) {\n    setActiveItem(null);\n    const {active, over} = event;\n    if (!over) {\n      return\n    }\n\n    const activeContainerIndex = findContainer(active.id);\n    const overContainerIndex = findContainer(over.id);\n\n    if (activeContainerIndex === overContainerIndex) {\n      const container = items[activeContainerIndex];\n      const activeItemIndex = container.items.indexOf(active.id);\n      const overItemIndex = container.items.indexOf(over.id);\n\n      const newItems = items.map(({header, items}, index) => {\n        if (index === activeContainerIndex) {\n          return {\n            header: header,\n            items: arrayMove(items, activeItemIndex, overItemIndex)\n          }\n        } else {\n          return {\n            header: header,\n            items: items\n          }\n        }\n      })\n\n      setItems(newItems);\n      if (!isSameOrder(clonedItems, newItems)) {\n        Streamlit.setComponentValue(newItems);\n      }\n    }\n  }\n\n  function handleDragOver(event: any) {\n    const {active, over} = event;\n\n    if (!over) {\n      return\n    }\n    const activeContainerIndex = findContainer(active.id);\n    const overContainerIndex = findContainer(over.id);\n    if (overContainerIndex < 0) {\n      return;\n    }\n\n    if (activeContainerIndex === overContainerIndex) {\n      return\n    }\n    console.log(active.id, over.id)\n\n    const activeItemIndex = items[activeContainerIndex].items.indexOf(active.id);\n    const activeItem = items[activeContainerIndex].items[activeItemIndex];\n    const newItems = items.map(({header, items}, index) => {\n      if (index === activeContainerIndex) {\n        return {\n          header: header,\n          items: [...items.slice(0, activeItemIndex),  ...items.slice(activeItemIndex + 1)]\n        }\n      } else if (index === overContainerIndex) {\n        return {\n          header: header,\n          items: [...items.slice(0, activeItemIndex),  activeItem, ...items.slice(activeItemIndex)]\n        }\n      } else {\n        return {\n          header: header,\n          items: items\n        }\n      }\n    })\n    setItems(newItems);\n  }\n\n  function findContainer(item: string) {\n    const containerIndex = items.findIndex(({header}) => header === item);\n    if (containerIndex >= 0) {\n      return containerIndex;\n    }\n    return items.findIndex(({items}) => items.includes(item));\n  }\n\n  function isSameOrder(items1: ContainerDescription[], items2: ContainerDescription[]) {\n    if (items1.length !== items2.length) {\n      return false;\n    }\n\n    return items1.every(({header, items}, index) => {\n      const container2 = items2[index];\n      if (header !== container2.header) {\n        return false;\n      }\n      return items.every((item, index) => {\n        return item === container2.items[index];\n      });\n    })\n  }\n}\n\nfunction SortableComponentWrapper(props: any) {\n  const args: StreamlitArguments = props.args;\n  const items = args.items;\n  const className = 'sortable-component ' + args.direction;\n  useEffect(() => Streamlit.setFrameHeight());\n\n  return (\n    <div className={className}>\n      <SortableComponent items={items} direction={args.direction} />\n    </div>\n  )\n}\n\n\n\nexport default withStreamlitConnection(SortableComponentWrapper)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SortableComponent from \"./SortableComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortableComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}